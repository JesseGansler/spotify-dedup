!function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=3)}([function(n,e,t){"use strict";const o="localhost:8005"===location.host?"http://localhost:8005/callback.html":"https://jmperezperez.com/spotify-dedup/callback.html",i=/http[s]?:\/\/[^/]+/.exec(o)[0];e.a={clientId:"04dca0de1c4e4aca88cc615ac23581be",redirectUri:o,host:i}},function(n,e,t){var o={},i=function(n){var e;return function(){return void 0===e&&(e=n.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),r=function(n){var e={};return function(n){if("function"==typeof n)return n();if(void 0===e[n]){var t=function(n){return document.querySelector(n)}.call(this,n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}}(),a=null,s=0,l=[],c=t(10);function p(n,e){for(var t=0;t<n.length;t++){var i=n[t],r=o[i.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](i.parts[a]);for(;a<i.parts.length;a++)r.parts.push(g(i.parts[a],e))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(g(i.parts[a],e));o[i.id]={id:i.id,refs:1,parts:s}}}}function d(n,e){for(var t=[],o={},i=0;i<n.length;i++){var r=n[i],a=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};o[a]?o[a].parts.push(s):t.push(o[a]={id:a,parts:[s]})}return t}function u(n,e){var t=r(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=l[l.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),l.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=r(n.insertInto+" "+n.insertAt.before);t.insertBefore(e,i)}}function f(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=l.indexOf(n);e>=0&&l.splice(e,1)}function h(n){var e=document.createElement("style");return void 0===n.attrs.type&&(n.attrs.type="text/css"),m(e,n.attrs),u(n,e),e}function m(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function g(n,e){var t,o,i,r;if(e.transform&&n.css){if(!(r=e.transform(n.css)))return function(){};n.css=r}if(e.singleton){var l=s++;t=a||(a=h(e)),o=y.bind(null,t,l,!1),i=y.bind(null,t,l,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",m(e,n.attrs),u(n,e),e}(e),o=function(n,e,t){var o=t.css,i=t.sourceMap,r=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||r)&&(o=c(o));i&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([o],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,e),i=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=h(e),o=function(n,e){var t=e.css,o=e.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){f(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else i()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=d(n,e);return p(t,e),function(n){for(var i=[],r=0;r<t.length;r++){var a=t[r];(s=o[a.id]).refs--,i.push(s)}n&&p(d(n,e),e);for(r=0;r<i.length;r++){var s;if(0===(s=i[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete o[s.id]}}}};var b=function(){var n=[];return function(e,t){return n[e]=t,n.filter(Boolean).join("\n")}}();function y(n,e,t,o){var i=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=b(e,i);else{var r=document.createTextNode(i),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(r,a[e]):n.appendChild(r)}}},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var i=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(o),r=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[t].concat(r).concat([i]).join("\n")}return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(o[r]=!0)}for(i=0;i<n.length;i++){var a=n[i];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){"use strict";t.r(e);t(13);var o=t(0);var i={obtainToken:function(n={}){return new Promise((e,t)=>{let i=null,r=null;window.addEventListener("message",function n(a){clearInterval(r),a.origin===o.a.host?(null!==i&&(i.close(),i=null),window.removeEventListener("message",n,!1),e(a.data)):t()},!1);const a=screen.width/2-200,s=screen.height/2-300,l={client_id:o.a.clientId,redirect_uri:o.a.redirectUri,response_type:"token"};n.scopes&&(l.scope=n.scopes.join(" ")),i=window.open(`https://accounts.spotify.com/authorize?${function(n){const e=[];for(const t in n)n.hasOwnProperty(t)&&e.push(`${encodeURIComponent(t)}=${encodeURIComponent(n[t])}`);return e.join("&")}(l)}`,"Spotify",`menubar=no,location=no,resizable=no,scrollbars=no,status=no, width=400, height=600, top=${s}, left=${a}`),r=setInterval(()=>{null!==i&&i.closed&&(clearInterval(r),t({message:"access_denied"}))},1e3)})}};const r=1e3,a=[];let s=!1;async function l(){if(console.log("tryToExecute"),!s&&a.length>0){s=!0;const n=a.shift();!async function n({promise:e,resolve:t,reject:o,url:i,options:a,retries:s}){console.log("execute");try{let l=await fetch(i,a),c=l.status<400;console.log("got status "+l.status+" with retries "+s),c?t(l):--s>0?setTimeout(()=>{n({promise:e,resolve:t,reject:o,url:i,options:a,retries:s})},r+2e3*Math.random()):o(l)}catch(c){--s>0?setTimeout(()=>{n({promise:e,resolve:t,reject:o,url:i,options:a,retries:s})},r+2e3*Math.random()):o(l)}}({promise:n.promise,resolve:n.resolve,reject:n.reject,url:n.url,options:n.options,retries:n.retries})}}var c=async function(n,e){console.log("customFetch",{url:n,options:e});const t=new Promise((t,o)=>{a.push({promise:null,resolve:t,reject:o,url:n,options:e,retries:3})});return l(),t.then(n=>{s=!1,l()}),t};async function p(n,e,t){async function o(n,e,o){return t.getGeneric(`${function(n){return-1!==n.indexOf("?")?n.substr(0,n.indexOf("?")):n}(n.href)}?offset=${e}&limit=${o}`)}const i=await n;if(null===i)return[];const r=[()=>n];let a=i.limit+i.offset;const s=i.limit;for(;i.total>a;)!function(n,e,t){console.log(e,t);r.push(()=>o(n,e,t))}(i,a,s),a+=s;return r.reduce((n,e)=>n.then(n=>e().then(Array.prototype.concat.bind(n))),Promise.resolve([]))}class d{constructor(n,e){this.api=n,this.promiseThrottle=e}async removeDuplicates(n){throw"Not implemented"}async getTracks(){throw"Not implemented"}findDuplicatedTracks(n){const e={},t={};return n.reduce((n,o,i)=>{if(null===o)return n;if(null===o.id)return n;let r=!1;const a=`${o.name}:${o.artists[0].name}`;return o.id in e?r=!0:a in t&&Math.abs(t[a]-o.duration_ms)<2e3&&(r=!0),r?n.push({index:i,track:o,reason:o.id in e?"same-id":"same-name-artist"}):(e[o.id]=!0,t[a]=o.duration_ms),n},[])}}class u extends d{constructor(n,e){super(n,e)}async getTracks(n){return new Promise((e,t)=>{const o=[];p(this.api.getGeneric(n.tracks.href),this.promiseThrottle,this.api).then(n=>Promise.all(n)).then(n=>{n.forEach(n=>{n.items.forEach((n,e)=>{o.push(n.track)})}),e(o)}).catch(t)})}async removeDuplicates(n){return new Promise((e,t)=>{if("starred"===n.playlist.id&&t("It is not possible to delete duplicates from your Starred playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually."),n.playlist.collaborative)t("It is not possible to delete duplicates from a collaborative playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.");else{const t=n.duplicates.map(n=>({uri:n.track.linked_from?n.track.linked_from.uri:n.track.uri,positions:[n.index]})).reverse(),o=[];do{const e=t.splice(0,100);!function(n,e,t){o.push(()=>t.removeTracksFromPlaylist(n.playlist.owner.id,n.playlist.id,e))}(n,e,this.api)}while(t.length>0);o.reduce((n,e)=>n.then(()=>e()),Promise.resolve(null)).then(()=>{n.duplicates.duplicates=[],e()})}})}}class f extends d{constructor(n,e){super(n,e)}async getTracks(n){return new Promise((e,t)=>{const o=[];p(n,this.promiseThrottle,this.api).then(n=>Promise.all(n)).then(n=>{n.forEach(n=>{n.items.forEach((n,e)=>{o.push(n.track)})}),e(o)}).catch(t)})}async removeDuplicates(n){return new Promise((e,t)=>{const o=n.duplicates.map(n=>n.track.linked_from?n.track.linked_from.id:n.track.id);do{(async()=>{const n=o.splice(0,50);await this.api.removeFromMySavedTracks(n)})()}while(o.length>0);n.duplicates=[],e()})}}t(12),t(9),t(5);const h=[400,401,404,429,500,502,503,504];const m=new class{needsCheckForDuplicates(n){if("snapshot_id"in n)try{if("0"===localStorage.getItem(n.snapshot_id))return!1}catch(n){return!0}return!0}storePlaylistWithoutDuplicates(n){if("snapshot_id"in n)try{localStorage.setItem(n.snapshot_id,"0")}catch(n){}}},g="https://api.spotify.com/v1";class b{constructor(){this.token=null}setAccessToken(n){this.token=n}async getMe(){return await this.getGeneric(`${g}/me`)}async getGeneric(n,e){const t=void 0===e?"":`?${Object.keys(e).map(n=>`${n}=${e[n]}`).join("&")}`,o=await c(`${n}${t}`,{method:"GET",headers:{Authorization:`Bearer ${this.token}`},retryOn:h}),i=await o.json();return o.ok?i:null}async getUserPlaylists(n,e){const t="string"==typeof n?`${g}/users/${encodeURIComponent(n)}/playlists`:`${g}/me/playlists`;return await this.getGeneric(t,e)}async removeTracksFromPlaylist(n,e,t){const o={tracks:t.map(n=>"string"==typeof n?{uri:n}:n)},i=await c(`${g}/users/${encodeURIComponent(n)}/playlists/${e}/tracks`,{method:"DELETE",headers:{Authorization:`Bearer ${this.token}`},body:JSON.stringify(o),retryOn:h}),r=await i.json();return i.ok?r:(window.Raven&&Raven.captureMessage(`Status ${i.status} when deleting tracks from playlist`,{extra:{json:r}}),null)}async getMySavedTracks(n){return this.getGeneric(`${g}/me/tracks`,n)}async removeFromMySavedTracks(n){return!!(await c(`${g}/me/tracks`,{method:"DELETE",headers:{Authorization:`Bearer ${this.token}`},body:JSON.stringify(n),retryOn:h})).ok}}const y=function(){let n,e,t,o=new Vue({el:"#app",data:{isLoggedIn:!1,toProcess:100,playlists:[],savedTracks:{duplicates:[],status:""}},methods:{removeDuplicates:e=>(async()=>{if("starred"===e.playlist.id&&window.alert("It is not possible to delete duplicates from your Starred playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually."),e.playlist.collaborative)window.alert("It is not possible to delete duplicates from a collaborative playlist using this tool since this is not supported in the Spotify Web API. You will need to remove these manually.");else{await n.removeDuplicates(e);e.duplicates=[],e.status="Duplicates removed",window.ga&&ga("send","event","spotify-dedup","playlist-removed-duplicates")}})(),removeDuplicatesInSavedTracks:()=>(async()=>{await e.removeDuplicates(o.savedTracks);o.savedTracks.duplicates=[],o.savedTracks.status="Duplicates removed",window.ga&&ga("send","event","spotify-dedup","saved-tracks-removed-duplicates")})()},computed:{duplicates:function(){return this.playlists.reduce((n,e)=>n+e.duplicates.length,0)+this.savedTracks.duplicates.length}}});document.getElementById("login").addEventListener("click",function(){i.obtainToken({scopes:["playlist-read-private","playlist-read-collaborative","playlist-modify-public","playlist-modify-private","user-library-read","user-library-modify"]}).then(function(i){!function(i){o.isLoggedIn=!0,(t=new b).setAccessToken(i),n=new u(t),e=new f(t);let a=0;const s=()=>t.getMe().then(i=>{null===i?(a++,window.Raven&&Raven.captureMessage("Retrying logging user in",{extra:{attempts:a}}),s()):(async()=>{await async function(i){var a=i.id,s=[];const l=await function(n){return async function(n){function e(n,e,o){return t.getGeneric(function(n){var e=new URL(n);return e.origin+e.pathname}(n.href)+"?offset="+e+"&limit="+o)}console.log("promisesForPages!"),console.log(n);const o=await n;if(console.log("got initial request",o),null===o)return[];const i=[()=>n];let r=o.limit+o.offset;const a=o.limit;for(;o.total>r;)!function(n,t,o){i.push(()=>e(n,t,o))}(o,r,a),r+=a;return console.log(i[0]()),i.reduce((n,e)=>n.then(n=>(console.log("executing",e),e().then(Array.prototype.concat.bind(n)))),Promise.resolve([]))}(t.getUserPlaylists(n,{limit:50})).then(function(e){var t=[];return e.forEach(function(e){t=t.concat(e.items.filter(function(e){return e.owner.id===n}))}),t})}(a);s=l,o.playlists=s.map(n=>r(n)),o.toProcess=o.playlists.length+1;const c=await e.getTracks(t.getMySavedTracks({limit:50}));o.savedTracks.duplicates=e.findDuplicatedTracks(c),o.savedTracks.duplicates.length&&window.ga&&ga("send","event","spotify-dedup","saved-tracks-found-duplicates");o.toProcess--,o.playlists.forEach(e=>(async()=>{if(m.needsCheckForDuplicates(e.playlist)){const t=await n.getTracks(e.playlist);e.duplicates=n.findDuplicatedTracks(t),0===e.duplicates.length&&m.storePlaylistWithoutDuplicates(e.playlist)}!function(n){n.processed=!0;var e=o.toProcess-1;o.toProcess-=1,0===e&&window.ga&&ga("send","event","spotify-dedup","library-processed")}(e.playlist)})())}(i)})()});s()}(i)}).catch(function(n){console.error(n)});const r=n=>({playlist:n,duplicates:[],status:"",processed:!1})})};window.Raven&&Raven.config("https://22cbac299caf4962b74de18bc87a8d74@sentry.io/1239123").install(),window.Raven?Raven.context(y):y()},,function(n,e,t){n.exports=t.p+"favicon.ico"},function(n,e,t){n.exports=t.p+"placeholder.png"},function(n,e){n.exports=function(n){return"string"!=typeof n?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),/["'() \t\n]/.test(n)?'"'+n.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':n)}},function(n,e,t){var o=t(7);(n.exports=t(2)(!1)).push([n.i,".browsehappy {\n  margin: 0.2em 0;\n  background: #ccc;\n  color: #000;\n  padding: 0.2em 0;\n}\n\n/* Everything but the jumbotron gets side spacing for mobile first views */\n.header,\n.marketing,\n.footer {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\n/* Custom page header */\n.header {\n  border-bottom: 1px solid #e5e5e5;\n}\n\n/* Make the masthead heading the same height as the navigation */\n.header h3 {\n  margin-top: 0;\n  margin-bottom: 0;\n  line-height: 40px;\n  padding-bottom: 19px;\n}\n\n/* Custom page footer */\n.footer {\n  padding-top: 19px;\n  color: #777;\n  border-top: 1px solid #e5e5e5;\n}\n\n/* Main marketing message and sign up button */\n.jumbotron {\n  text-align: center;\n  border-bottom: 1px solid #e5e5e5;\n}\n\n.jumbotron .btn {\n  font-size: 21px;\n  padding: 14px 24px;\n}\n\n/* Supporting marketing content */\n.marketing {\n  margin: 40px 0;\n}\n\n/* Responsive: Portrait tablets and up */\n@media screen and (min-width: 768px) {\n  .container {\n    max-width: 730px;\n  }\n\n  /* Remove the padding we set earlier */\n  .header,\n  .marketing,\n  .footer {\n    padding-left: 0;\n    padding-right: 0;\n  }\n\n  /* Space out the masthead */\n  .header {\n    margin-bottom: 30px;\n  }\n\n  /* Remove the bottom border on the jumbotron for visual effect */\n  .jumbotron {\n    border-bottom: 0;\n  }\n}\n\n.footer {\n  text-align: center;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: 'Proxima Nova', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 800;\n}\n\n.jumbotron {\n  background-color: transparent;\n}\n\n.playlists-list {\n  list-style: none;\n  padding: 0;\n}\n\n.playlists-list-item {\n  margin-bottom: 2rem;\n}\n\n.playlists-list-item__img {\n  width: 100px;\n}\n\n.playlists-list-item__placeholder {\n  background-image: url("+o(t(6))+");\n  background-size: cover;\n  height: 100px;\n  width: 100px;\n}\n\n.playlists-list-item__name {\n  display: block;\n  font-weight: bold;\n  max-width: 50%;\n}\n\n.playlist-list-item__btn {\n  max-width: 50%;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n@media (max-width: 700px) {\n  .playlists-list-item__name {\n    max-width: 100%;\n  }\n  .playlist-list-item__btn {\n    position: relative;\n    max-width: 100%;\n  }\n}\n\n.playlist-list-item__btn:hover {\n  cursor: pointer;\n}\n\n.btn-primary.playlist-list-item__btn:hover {\n  background-color: #69a3d3;\n}\n\n.gray {\n  color: #999;\n}\n\n.duplicates {\n  margin-top: 1rem;\n  padding: 0;\n}\n\n.bd {\n  position: relative;\n}\n\n.media,\n.bd {\n  overflow: hidden;\n  _overflow: visible;\n  zoom: 1;\n}\n.media .img {\n  float: left;\n  margin-right: 20px;\n}\n\n@media (max-width: 500px) {\n  .media .img {\n    float: none;\n  }\n}\n\n.media .img {\n  display: block;\n}\n",""])},function(n,e,t){var o=t(8);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var i,r=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?n:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?t+r:o+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,"html {\n  font-family: sans-serif;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\na {\n  background: 0 0;\n}\nh1 {\n  margin: 0.67em 0;\n}\nstrong {\n  font-weight: 700;\n}\nimg {\n  border: 0;\n}\nbutton {\n  margin: 0;\n}\nbutton {\n  text-transform: none;\n}\nbutton {\n  -webkit-appearance: button;\n}\nbutton::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\n*,\n:after,\n:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml {\n  font-size: 62.5%;\n}\nbody {\n  font-size: 14px;\n  line-height: 1.428571429;\n  color: #333;\n  background-color: #fff;\n}\nbutton {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #428bca;\n  text-decoration: none;\n}\nimg {\n  vertical-align: middle;\n}\nh1,\nh3,\nh4 {\n  line-height: 1.1;\n  color: inherit;\n}\nh1,\nh3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh4 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh1 {\n  font-size: 36px;\n}\nh3 {\n  font-size: 24px;\n}\nh4 {\n  font-size: 18px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 200;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\n.text-muted {\n  color: #999;\n}\nul {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.container:after,\n.container:before {\n  display: table;\n  content: ' ';\n}\n.container:after {\n  clear: both;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.row {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n.row:after,\n.row:before {\n  display: table;\n  content: ' ';\n}\n.row:after {\n  clear: both;\n}\n.col-lg-12,\n.col-lg-4,\n.col-md-4,\n.col-sm-4 {\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n@media (min-width: 768px) {\n  .col-sm-4 {\n    float: left;\n  }\n  .col-sm-4 {\n    width: 33.33333333333333%;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-4 {\n    float: left;\n  }\n  .col-md-4 {\n    width: 33.33333333333333%;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-12,\n  .col-lg-4 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-4 {\n    width: 33.33333333333333%;\n  }\n}\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.428571429;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.33;\n  border-radius: 6px;\n}\n.btn-primary {\n  color: #fff;\n  background-color: #428bca;\n  border-color: #357ebd;\n}\n.btn-xs {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n.nav:after,\n.nav:before {\n  display: table;\n  content: ' ';\n}\n.nav:after {\n  clear: both;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.label {\n  display: inline;\n  padding: 0.2em 0.6em 0.3em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25em;\n}\n.label:empty {\n  display: none;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: 700;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  background-color: #999;\n  border-radius: 10px;\n}\n.jumbotron {\n  padding: 30px;\n  margin-bottom: 30px;\n  font-size: 21px;\n  font-weight: 200;\n  line-height: 2.1428571435;\n  color: inherit;\n}\n.jumbotron h1 {\n  line-height: 1;\n  color: inherit;\n}\n.jumbotron p {\n  line-height: 1.4;\n}\n.container .jumbotron {\n  border-radius: 6px;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron {\n    padding-right: 60px;\n    padding-left: 60px;\n  }\n  .jumbotron h1 {\n    font-size: 63px;\n  }\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-body:after,\n.panel-body:before {\n  display: table;\n  content: ' ';\n}\n.panel-body:after {\n  clear: both;\n}\n.panel-default {\n  border-color: #ddd;\n}\n.pull-right {\n  float: right !important;\n}\n@-ms-viewport {\n  width: device-width;\n}\nbody {\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\n.header,\n.marketing {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.header {\n  border-bottom: 1px solid #e5e5e5;\n}\n.header h3 {\n  margin-top: 0;\n  margin-bottom: 0;\n  line-height: 40px;\n  padding-bottom: 19px;\n}\n.jumbotron {\n  text-align: center;\n  border-bottom: 1px solid #e5e5e5;\n}\n.jumbotron .btn {\n  font-size: 21px;\n  padding: 14px 24px;\n}\n.marketing {\n  margin: 40px 0;\n}\n@media screen and (min-width: 768px) {\n  .container {\n    max-width: 730px;\n  }\n  .header,\n  .marketing {\n    padding-left: 0;\n    padding-right: 0;\n  }\n  .header {\n    margin-bottom: 30px;\n  }\n  .jumbotron {\n    border-bottom: 0;\n  }\n}\nbody {\n  font-family: 'Proxima Nova', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\nh1,\nh3,\nh4 {\n  font-family: 'Proxima Nova', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 800;\n}\n.jumbotron {\n  background-color: transparent;\n}\n",""])},function(n,e,t){var o=t(11);"string"==typeof o&&(o=[[n.i,o,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(1)(o,i);o.locals&&(n.exports=o.locals)},function(n,e,t){"use strict";function o(n){this.requestsPerSecond=n.requestsPerSecond,this.promiseImplementation=n.promiseImplementation||Promise,this.lastStartTime=0,this.queued=[]}o.prototype.add=function(n,e){var t=this,o=e||{};return new t.promiseImplementation(function(e,i){t.queued.push({resolve:e,reject:i,promise:n,weight:o.weight||1,signal:o.signal}),t.dequeue()})},o.prototype.addAll=function(n,e){var t=n.map(function(n){return this.add(n,e)}.bind(this));return Promise.all(t)},o.prototype.dequeue=function(){if(this.queued.length>0){var n=new Date,e=this.queued[0].weight,t=1e3/this.requestsPerSecond*e,o=n-this.lastStartTime;o>=t?this._execute():setTimeout(function(){this.dequeue()}.bind(this),t-o)}},o.prototype._execute=function(){this.lastStartTime=new Date;var n=this.queued.shift();n.signal&&n.signal.aborted?n.reject(new DOMException("","AbortError")):n.promise().then(function(e){n.resolve(e)}).catch(function(e){n.reject(e)})},n.exports=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,